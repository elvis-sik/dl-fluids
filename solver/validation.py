"""Functions used for the validation of the OpenFOAM code.

Also see the notebook "Validating the (OpenFOAM) solver.ipynb"
"""
from itertools import count
import json
import os
from pathlib import Path
import time

import scipy.signal as signal
from shapely.geometry import Polygon, Point
import skimage.draw as draw
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import torch

import solver.cases as cases
from .cloud_array import get_field_from_data_array


def load_forces_dataset(training_set_dir):
    """Load array containing (Reynolds, C_D) from dataset.

    The training_set_dir is a directory contained a sequence of samples as
    generated by main.solve_cases
    """
    def load_params_json(filename):
        """Loads json into dict."""
        with open(filename) as file:
            return json.loads(file.read())

    training_set_dir = Path(training_set_dir)
    data = []

    for sample in training_set_dir.glob('*'):
        fields = np.load(sample / 'data.npy')
        cd_field = get_field_from_data_array(fields, which_field='C_D')
        c_d = cd_field[0, 0]
        params_dict = load_params_json(sample / 'params.json')
        reynolds = params_dict['reynolds']
        data.append((reynolds, c_d))

    data.sort(key=lambda d: d[0])

    return np.array(data)


def confine_to_reynolds_range(re_cd_array, lower_re=10, higher_re=70):
    """Returns only (Reynolds, C_D) rows of array confined in given range."""
    rows, = np.where(
        np.logical_and(re_cd_array[:, 0] > lower_re,
                       re_cd_array[:, 0] < higher_re))
    return re_cd_array[rows, :]


def compare_forces(training_set_dir,
                   save_as='forces-fig.jpg',
                   lower_re=10,
                   higher_re=70,
                   xlim=(10, 63)):
    """Plots figure comparing benchmark C_D to the ones obtained."""
    def load_validation_data():
        validation_data = np.array(VALIDATION_RE_CD)
        validation_data = confine_to_reynolds_range(validation_data,
                                                    lower_re=lower_re,
                                                    higher_re=higher_re)
        validation_re = validation_data[:, 0]
        validation_cd = validation_data[:, 1]
        return validation_re, validation_cd

    def load_training_data():
        training_data = load_forces_dataset(training_set_dir)
        training_data = confine_to_reynolds_range(training_data,
                                                  lower_re=lower_re,
                                                  higher_re=higher_re)
        train_re = training_data[:, 0]
        train_cd = training_data[:, 1]
        return train_re, train_cd

    def plot_data(train_cd, validation_cd, save_as):
        plt.plot(train_re,
                 train_cd,
                 'ro',
                 label='data from cases solved with OpenFOAM')
        plt.plot(validation_re,
                 validation_cd,
                 'bx',
                 label='data from (Anderson, 2016)')
        plt.xlabel('Reynolds')
        plt.ylabel('$C_D$')
        plt.xlim(*xlim)
        plt.legend()
        plt.grid()

        if save_as:
            plt.savefig(save_as)

        plt.show()

    train_re, train_cd = load_training_data()
    validation_re, validation_cd = load_validation_data()
    plot_data(train_cd, validation_cd, save_as)


def single_validation_case(reynolds,
                           diameter=.5,
                           nu=5e-2,
                           edge_lc=0.2,
                           n_steps=50):
    """Creates cases.Case object for a single validation case."""
    geom_coords = cases.circle_coordinates(radius=diameter / 2,
                                           n_steps=n_steps)

    vel_x = reynolds * nu / diameter

    physics = cases.PhysParams(reynolds=reynolds,
                               freestream_vel=(vel_x, 0),
                               nu=nu,
                               a_ref=diameter,
                               diameter=diameter,
                               edge_lc=edge_lc)

    return cases.Case(geom_coords, physics)


def iter_validation_params(lower_re=0,
                           higher_re=np.inf,
                           diameter=.5,
                           nu=5e-2,
                           edge_lc=0.2):
    """Generates a sequence of validation cases with different Reynolds."""
    all_reynolds = confine_to_reynolds_range(VALIDATION_RE_CD,
                                             lower_re=lower_re,
                                             higher_re=higher_re)
    for reynolds, _ in all_reynolds:
        yield single_validation_case(reynolds,
                                     diameter=diameter,
                                     nu=nu,
                                     edge_lc=edge_lc)


def compute_strouhal(sample, window_size):
    """Compute Strouhal number of sample

    Based on this code: https://github.com/Comflics/Exploring-OpenFOAM
    """
    time_series = sample.force_series('times')
    dt = time_series[1] - time_series[0]
    lift_coeff_series = sample.force_series('C_L')

    freq, cl_amp = signal.welch(lift_coeff_series,
                                1. / dt,
                                nperseg=window_size)

    # find the array index corresponding to max amplitude
    fundamental_frequency_index = np.argmax(abs(cl_amp))
    vortex_shedding_freq = freq[fundamental_frequency_index]

    ref_length = sample.diameter
    speed = sample.freestream_speed
    strouhal = vortex_shedding_freq * ref_length / speed

    return strouhal


def load_strouhal(dataset, window_size):
    """Loads an array containing (Reynolds, Strouhal) from dataset.

    The dataset is a directory contained a sequence of samples as generated by
    main.solve_cases

    The window_size is the one used to compute the Strouhal number. I just
    tried a bunch of different ones.
    """
    strouhal_data = []

    for i in range(len(dataset)):
        sample = dataset.get_sample(i)
        reynolds = sample.reynolds
        strouhal = compute_strouhal(sample, window_size)
        strouhal_data.append((reynolds, strouhal))

    strouhal_data.sort(key=lambda d: d[0])
    return strouhal_data


# sequence of (Reynolds, C_D) pairs grabbed from the literature
VALIDATION_RE_CD = np.array([
    (0.2218051185142395, 29.006887274830707),
    (0.26994769334439456, 26.053691263586604),
    (0.3806875907540227, 19.256644984682247),
    (0.4557931274571062, 16.798627089861206),
    (0.5281397009108036, 15.536635364884534),
    (0.611969612693212, 14.651996853523443),
    (0.6533800605002653, 13.819322719062736),
    (0.7091055760701652, 13.033668814033824),
    (0.7822848667162191, 12.292397173151336),
    (0.8490044226924364, 11.593551792839694),
    (0.9520789994515533, 10.93393252556265),
    (1.103199429133826, 10.112524186958513),
    (1.237134908384047, 9.262633211869144),
    (1.4102272408319783, 8.82089515191089),
    (1.5814378636482425, 8.00127548842249),
    (1.9887408707845764, 7.768442541980068),
    (2.2669933019671022, 7.046452064924947),
    (2.542220814180739, 6.517390229978156),
    (2.804576550936322, 6.087168141671038),
    (3.0940072499550624, 5.74096898768873),
    (3.890876027398617, 5.056810009586965),
    (5.055818435720479, 4.497553762008699),
    (5.669627188070893, 4.00097895992718),
    (6.788183198848772, 3.6288812129077748),
    (8.12741819040333, 3.3235909436803297),
    (9.41745707357246, 3.0441245738269807),
    (11.275419311028019, 2.6815377567104193),
    (13.722737576533666, 2.504179008880068),
    (16.163328729213124, 2.2059562037482547),
    (19.3521783492164, 2.121159612828907),
    (23.552548929230053, 2.0395755326080645),
    (28.66460566111088, 1.8498489117986048),
    (34.319821761787594, 1.694224949706836),
    (40.42360775100518, 1.5366946438016402),
    (48.516003575517104, 1.4197860962566844),
    (50.14819577524424, 1.4155080213903741),
    (60.640143020684675, 1.3877005347593583),
    (70.43956905609484, 1.3647058823529412),
    (80.01568209261845, 1.346524064171123),
    (90.30815311995232, 1.3336898395721926),
    (100.37605658099017, 1.3251336898395722),
    (110.2150014897988, 1.3189839572192514),
    (120.05833738454061, 1.3147058823529412),
    (130.14317750560633, 1.3133689839572193),
    (140.23052676149106, 1.3131016042780748),
    (150.31913058478523, 1.3133689839572193),
    (160.64547493217495, 1.3149732620320855),
    (170.50386563583044, 1.3171122994652407),
    (180.83271911803914, 1.3197860962566845),
    (190.22378346166514, 1.3227272727272728),
    (191.63203537880096, 1.3229946524064171),
    (193.7453541800618, 1.3237967914438502),
    (195.39009205388368, 1.3248663101604279),
    (200.31991468941615, 1.3262032085561497),
    (210.65127730644377, 1.3299465240641712),
    (220.7486631016043, 1.333957219251337),
    (230.14223658004926, 1.3379679144385026),
    (240.47297191337213, 1.3414438502673796),
    (250.8049618141045, 1.3454545454545455),
])
